module.exports = {
"MyRecord": require("./output/Apis").MyRecord,
"AgeRecord": require("./output/Apis").AgeRecord,
"Alt": require("./output/Control.Alt").Alt,
"Alternative": require("./output/Control.Alternative").Alternative,
"Applicative": require("./output/Control.Applicative").Applicative,
"Apply": require("./output/Control.Apply").Apply,
"Biapplicative": require("./output/Control.Biapplicative").Biapplicative,
"Biapply": require("./output/Control.Biapply").Biapply,
"Bind": require("./output/Control.Bind").Bind,
"Discard": require("./output/Control.Bind").Discard,
"Category": require("./output/Control.Category").Category,
"Comonad": require("./output/Control.Comonad").Comonad,
"ComonadAsk": require("./output/Control.Comonad.Env.Class").ComonadAsk,
"ComonadEnv": require("./output/Control.Comonad.Env.Class").ComonadEnv,
"EnvT": require("./output/Control.Comonad.Env.Trans").EnvT,
"ComonadStore": require("./output/Control.Comonad.Store.Class").ComonadStore,
"StoreT": require("./output/Control.Comonad.Store.Trans").StoreT,
"ComonadTraced": require("./output/Control.Comonad.Traced.Class").ComonadTraced,
"TracedT": require("./output/Control.Comonad.Traced.Trans").TracedT,
"ComonadTrans": require("./output/Control.Comonad.Trans.Class").ComonadTrans,
"Extend": require("./output/Control.Extend").Extend,
"Lazy": require("./output/Control.Lazy").Lazy,
"Monad": require("./output/Control.Monad").Monad,
"Canceler": require("./output/Control.Monad.Aff").Canceler,
"ParAff": require("./output/Control.Monad.Aff").ParAff,
"MonadAff": require("./output/Control.Monad.Aff.Class").MonadAff,
"_killVar": require("./output/Control.Monad.Aff.Internal")._killVar,
"_makeVar": require("./output/Control.Monad.Aff.Internal")._makeVar,
"_peekVar": require("./output/Control.Monad.Aff.Internal")._peekVar,
"_putVar": require("./output/Control.Monad.Aff.Internal")._putVar,
"_takeVar": require("./output/Control.Monad.Aff.Internal")._takeVar,
"_tryPeekVar": require("./output/Control.Monad.Aff.Internal")._tryPeekVar,
"_tryTakeVar": require("./output/Control.Monad.Aff.Internal")._tryTakeVar,
"MonadCont": require("./output/Control.Monad.Cont.Class").MonadCont,
"ContT": require("./output/Control.Monad.Cont.Trans").ContT,
"MonadEff": require("./output/Control.Monad.Eff.Class").MonadEff,
"MonadError": require("./output/Control.Monad.Error.Class").MonadError,
"MonadThrow": require("./output/Control.Monad.Error.Class").MonadThrow,
"ExceptT": require("./output/Control.Monad.Except.Trans").ExceptT,
"MonadGen": require("./output/Control.Monad.Gen.Class").MonadGen,
"ListT": require("./output/Control.Monad.List.Trans").ListT,
"Yield": require("./output/Control.Monad.List.Trans").Yield,
"Skip": require("./output/Control.Monad.List.Trans").Skip,
"Done": require("./output/Control.Monad.Rec.Class").Done,
"MaybeT": require("./output/Control.Monad.Maybe.Trans").MaybeT,
"RWSResult": require("./output/Control.Monad.RWS.Trans").RWSResult,
"RWST": require("./output/Control.Monad.RWS.Trans").RWST,
"MonadAsk": require("./output/Control.Monad.Reader.Class").MonadAsk,
"MonadReader": require("./output/Control.Monad.Reader.Class").MonadReader,
"ReaderT": require("./output/Control.Monad.Reader.Trans").ReaderT,
"Loop": require("./output/Control.Monad.Rec.Class").Loop,
"MonadRec": require("./output/Control.Monad.Rec.Class").MonadRec,
"MonadState": require("./output/Control.Monad.State.Class").MonadState,
"StateT": require("./output/Control.Monad.State.Trans").StateT,
"MonadTrans": require("./output/Control.Monad.Trans.Class").MonadTrans,
"MonadTell": require("./output/Control.Monad.Writer.Class").MonadTell,
"MonadWriter": require("./output/Control.Monad.Writer.Class").MonadWriter,
"WriterT": require("./output/Control.Monad.Writer.Trans").WriterT,
"MonadPlus": require("./output/Control.MonadPlus").MonadPlus,
"MonadZero": require("./output/Control.MonadZero").MonadZero,
"ParCont": require("./output/Control.Parallel.Class").ParCont,
"Parallel": require("./output/Control.Parallel.Class").Parallel,
"Plus": require("./output/Control.Plus").Plus,
"Semigroupoid": require("./output/Control.Semigroupoid").Semigroupoid,
"None": require("./output/DOM.Event.EventPhase").None,
"Capturing": require("./output/DOM.Event.EventPhase").Capturing,
"AtTarget": require("./output/DOM.Event.EventPhase").AtTarget,
"Bubbling": require("./output/DOM.Event.EventPhase").Bubbling,
"Standard": require("./output/DOM.Event.KeyboardEvent").Standard,
"Left": require("./output/Data.Either").Left,
"Right": require("./output/Data.Either").Right,
"Numpad": require("./output/DOM.Event.KeyboardEvent").Numpad,
"EventType": require("./output/DOM.Event.Types").EventType,
"Pixel": require("./output/DOM.Event.WheelEvent").Pixel,
"Line": require("./output/DOM.Event.WheelEvent").Line,
"Page": require("./output/DOM.Event.WheelEvent").Page,
"EMPTY": require("./output/DOM.File.FileReader.ReadyState").EMPTY,
"LOADING": require("./output/DOM.HTML.HTMLTrackElement.ReadyState").LOADING,
"DONE": require("./output/DOM.File.FileReader.ReadyState").DONE,
"NETWORK_EMPTY": require("./output/DOM.HTML.HTMLMediaElement.NetworkState").NETWORK_EMPTY,
"NETWORK_IDLE": require("./output/DOM.HTML.HTMLMediaElement.NetworkState").NETWORK_IDLE,
"NETWORK_LOADING": require("./output/DOM.HTML.HTMLMediaElement.NetworkState").NETWORK_LOADING,
"NETWORK_NO_SOURCE": require("./output/DOM.HTML.HTMLMediaElement.NetworkState").NETWORK_NO_SOURCE,
"HAVE_NOTHING": require("./output/DOM.HTML.HTMLMediaElement.ReadyState").HAVE_NOTHING,
"HAVE_METADATA": require("./output/DOM.HTML.HTMLMediaElement.ReadyState").HAVE_METADATA,
"HAVE_CURRENT_DATA": require("./output/DOM.HTML.HTMLMediaElement.ReadyState").HAVE_CURRENT_DATA,
"HAVE_FUTURE_DATA": require("./output/DOM.HTML.HTMLMediaElement.ReadyState").HAVE_FUTURE_DATA,
"HAVE_ENOUGH_DATA": require("./output/DOM.HTML.HTMLMediaElement.ReadyState").HAVE_ENOUGH_DATA,
"NONE": require("./output/DOM.HTML.HTMLTrackElement.ReadyState").NONE,
"LOADED": require("./output/DOM.HTML.HTMLTrackElement.ReadyState").LOADED,
"ERROR": require("./output/DOM.HTML.HTMLTrackElement.ReadyState").ERROR,
"Delta": require("./output/DOM.HTML.History").Delta,
"DocumentTitle": require("./output/DOM.HTML.History").DocumentTitle,
"URL": require("./output/DOM.HTML.History").URL,
"ElementNode": require("./output/DOM.Node.NodeType").ElementNode,
"AttributeNode": require("./output/DOM.Node.NodeType").AttributeNode,
"TextNode": require("./output/DOM.Node.NodeType").TextNode,
"CDATASectionNode": require("./output/DOM.Node.NodeType").CDATASectionNode,
"EntityReferenceNode": require("./output/DOM.Node.NodeType").EntityReferenceNode,
"EntityNode": require("./output/DOM.Node.NodeType").EntityNode,
"ProcessingInstructionNode": require("./output/DOM.Node.NodeType").ProcessingInstructionNode,
"CommentNode": require("./output/DOM.Node.NodeType").CommentNode,
"DocumentNode": require("./output/DOM.Node.NodeType").DocumentNode,
"DocumentTypeNode": require("./output/DOM.Node.NodeType").DocumentTypeNode,
"DocumentFragmentNode": require("./output/DOM.Node.NodeType").DocumentFragmentNode,
"NotationNode": require("./output/DOM.Node.NodeType").NotationNode,
"QuerySelector": require("./output/DOM.Node.ParentNode").QuerySelector,
"ElementId": require("./output/DOM.Node.Types").ElementId,
"Blob": require("./output/DOM.Websocket.BinaryType").Blob,
"ArrayBuffer": require("./output/DOM.Websocket.BinaryType").ArrayBuffer,
"Connecting": require("./output/DOM.Websocket.ReadyState").Connecting,
"Open": require("./output/DOM.Websocket.ReadyState").Open,
"Closing": require("./output/DOM.Websocket.ReadyState").Closing,
"Closed": require("./output/DOM.Websocket.ReadyState").Closed,
"Protocol": require("./output/DOM.Websocket.Types").Protocol,
"FormDataString": require("./output/DOM.XHR.FormData").FormDataString,
"FormDataFile": require("./output/DOM.XHR.FormData").FormDataFile,
"FormDataBlob": require("./output/DOM.XHR.FormData").FormDataBlob,
"Bifoldable": require("./output/Data.Bifoldable").Bifoldable,
"Bifunctor": require("./output/Data.Bifunctor").Bifunctor,
"Clown": require("./output/Data.Bifunctor.Clown").Clown,
"Flip": require("./output/Data.Bifunctor.Flip").Flip,
"Join": require("./output/Data.Bifunctor.Join").Join,
"Joker": require("./output/Data.Bifunctor.Joker").Joker,
"Product": require("./output/Data.Generic.Rep").Product,
"Wrap": require("./output/Data.Bifunctor.Wrap").Wrap,
"Bitraversable": require("./output/Data.Bitraversable").Bitraversable,
"BooleanAlgebra": require("./output/Data.BooleanAlgebra").BooleanAlgebra,
"Bounded": require("./output/Data.Bounded").Bounded,
"CommutativeRing": require("./output/Data.CommutativeRing").CommutativeRing,
"Comparison": require("./output/Data.Comparison").Comparison,
"Const": require("./output/Data.Const").Const,
"January": require("./output/Data.Date.Component").January,
"February": require("./output/Data.Date.Component").February,
"March": require("./output/Data.Date.Component").March,
"April": require("./output/Data.Date.Component").April,
"May": require("./output/Data.Date.Component").May,
"June": require("./output/Data.Date.Component").June,
"July": require("./output/Data.Date.Component").July,
"August": require("./output/Data.Date.Component").August,
"September": require("./output/Data.Date.Component").September,
"October": require("./output/Data.Date.Component").October,
"November": require("./output/Data.Date.Component").November,
"December": require("./output/Data.Date.Component").December,
"Monday": require("./output/Data.Date.Component").Monday,
"Tuesday": require("./output/Data.Date.Component").Tuesday,
"Wednesday": require("./output/Data.Date.Component").Wednesday,
"Thursday": require("./output/Data.Date.Component").Thursday,
"Friday": require("./output/Data.Date.Component").Friday,
"Saturday": require("./output/Data.Date.Component").Saturday,
"Sunday": require("./output/Data.Date.Component").Sunday,
"DateTime": require("./output/Data.DateTime").DateTime,
"LocalValue": require("./output/Data.DateTime.Locale").LocalValue,
"Locale": require("./output/Data.DateTime.Locale").Locale,
"LocaleName": require("./output/Data.DateTime.Locale").LocaleName,
"Decidable": require("./output/Data.Decidable").Decidable,
"Decide": require("./output/Data.Decide").Decide,
"Distributive": require("./output/Data.Distributive").Distributive,
"Divide": require("./output/Data.Divide").Divide,
"Divisible": require("./output/Data.Divisible").Divisible,
"Cardinality": require("./output/Data.Enum").Cardinality,
"BoundedEnum": require("./output/Data.Enum").BoundedEnum,
"Enum": require("./output/Data.Enum").Enum,
"Eq": require("./output/Data.Eq").Eq,
"Eq1": require("./output/Data.Eq").Eq1,
"Equivalence": require("./output/Data.Equivalence").Equivalence,
"EuclideanRing": require("./output/Data.EuclideanRing").EuclideanRing,
"Field": require("./output/Data.Generic.Rep").Field,
"Foldable": require("./output/Data.Foldable").Foldable,
"ForeignError": require("./output/Data.Foreign").ForeignError,
"TypeMismatch": require("./output/Data.Foreign").TypeMismatch,
"ErrorAtIndex": require("./output/Data.Foreign").ErrorAtIndex,
"ErrorAtProperty": require("./output/Data.Foreign").ErrorAtProperty,
"JSONError": require("./output/Data.Foreign").JSONError,
"Decode": require("./output/Data.Foreign.Class").Decode,
"Encode": require("./output/Data.Foreign.Class").Encode,
"GenericCountArgs": require("./output/Data.Foreign.Generic.Class").GenericCountArgs,
"GenericDecode": require("./output/Data.Foreign.Generic.Class").GenericDecode,
"GenericDecodeArgs": require("./output/Data.Foreign.Generic.Class").GenericDecodeArgs,
"GenericDecodeFields": require("./output/Data.Foreign.Generic.Class").GenericDecodeFields,
"GenericEncode": require("./output/Data.Foreign.Generic.Class").GenericEncode,
"GenericEncodeArgs": require("./output/Data.Foreign.Generic.Class").GenericEncodeArgs,
"GenericEncodeFields": require("./output/Data.Foreign.Generic.Class").GenericEncodeFields,
"TaggedObject": require("./output/Data.Foreign.Generic.Types").TaggedObject,
"Index": require("./output/Data.Foreign.Index").Index,
"Indexable": require("./output/Data.Foreign.Index").Indexable,
"NullOrUndefined": require("./output/Data.Foreign.NullOrUndefined").NullOrUndefined,
"FormURLEncoded": require("./output/Data.FormURLEncoded").FormURLEncoded,
"Functor": require("./output/Data.Functor").Functor,
"App": require("./output/Data.Functor.App").App,
"Compose": require("./output/Data.Functor.Compose").Compose,
"Contravariant": require("./output/Data.Functor.Contravariant").Contravariant,
"Coproduct": require("./output/Data.Functor.Coproduct").Coproduct,
"Invariant": require("./output/Data.Functor.Invariant").Invariant,
"SigProd": require("./output/Data.Generic").SigProd,
"SigRecord": require("./output/Data.Generic").SigRecord,
"SigNumber": require("./output/Data.Generic").SigNumber,
"SigBoolean": require("./output/Data.Generic").SigBoolean,
"SigInt": require("./output/Data.Generic").SigInt,
"SigString": require("./output/Data.Generic").SigString,
"SigChar": require("./output/Data.Generic").SigChar,
"SigArray": require("./output/Data.Generic").SigArray,
"SigUnit": require("./output/Data.Generic").SigUnit,
"SProd": require("./output/Data.Generic").SProd,
"SRecord": require("./output/Data.Generic").SRecord,
"SNumber": require("./output/Data.Generic").SNumber,
"SBoolean": require("./output/Data.Generic").SBoolean,
"SInt": require("./output/Data.Generic").SInt,
"SString": require("./output/Data.Generic").SString,
"SChar": require("./output/Data.Generic").SChar,
"SArray": require("./output/Data.Generic").SArray,
"SUnit": require("./output/Data.Generic").SUnit,
"Generic": require("./output/Data.Generic.Rep").Generic,
"Argument": require("./output/Data.Generic.Rep").Argument,
"Constructor": require("./output/Data.Generic.Rep").Constructor,
"NoArguments": require("./output/Data.Generic.Rep").NoArguments,
"Rec": require("./output/Data.Generic.Rep").Rec,
"Inl": require("./output/Data.Generic.Rep").Inl,
"Inr": require("./output/Data.Generic.Rep").Inr,
"GenericBottom": require("./output/Data.Generic.Rep.Bounded").GenericBottom,
"GenericTop": require("./output/Data.Generic.Rep.Bounded").GenericTop,
"GenericEq": require("./output/Data.Generic.Rep.Eq").GenericEq,
"GenericMonoid": require("./output/Data.Generic.Rep.Monoid").GenericMonoid,
"GenericOrd": require("./output/Data.Generic.Rep.Ord").GenericOrd,
"GenericSemigroup": require("./output/Data.Generic.Rep.Semigroup").GenericSemigroup,
"GenericShow": require("./output/Data.Generic.Rep.Show").GenericShow,
"GenericShowArgs": require("./output/Data.Generic.Rep.Show").GenericShowArgs,
"GenericShowFields": require("./output/Data.Generic.Rep.Show").GenericShowFields,
"OPTIONS": require("./output/Data.HTTP.Method").OPTIONS,
"GET": require("./output/Data.HTTP.Method").GET,
"HEAD": require("./output/Data.HTTP.Method").HEAD,
"POST": require("./output/Data.HTTP.Method").POST,
"PUT": require("./output/Data.HTTP.Method").PUT,
"DELETE": require("./output/Data.HTTP.Method").DELETE,
"TRACE": require("./output/Data.HTTP.Method").TRACE,
"CONNECT": require("./output/Data.HTTP.Method").CONNECT,
"PROPFIND": require("./output/Data.HTTP.Method").PROPFIND,
"PROPPATCH": require("./output/Data.HTTP.Method").PROPPATCH,
"MKCOL": require("./output/Data.HTTP.Method").MKCOL,
"COPY": require("./output/Data.HTTP.Method").COPY,
"MOVE": require("./output/Data.HTTP.Method").MOVE,
"LOCK": require("./output/Data.HTTP.Method").LOCK,
"UNLOCK": require("./output/Data.HTTP.Method").UNLOCK,
"PATCH": require("./output/Data.HTTP.Method").PATCH,
"HeytingAlgebra": require("./output/Data.HeytingAlgebra").HeytingAlgebra,
"Identity": require("./output/Data.Identity").Identity,
"Pattern": require("./output/Data.String").Pattern,
"List": require("./output/Data.List.Lazy.Types").List,
"NonEmptyList": require("./output/Data.List.Types").NonEmptyList,
"Nil": require("./output/Data.List.Types").Nil,
"Cons": require("./output/Data.List.Types").Cons,
"ZipList": require("./output/Data.List.ZipList").ZipList,
"Nothing": require("./output/Data.Maybe").Nothing,
"Just": require("./output/Data.Maybe").Just,
"First": require("./output/Data.Maybe.First").First,
"Last": require("./output/Data.Maybe.Last").Last,
"MediaType": require("./output/Data.MediaType").MediaType,
"Monoid": require("./output/Data.Monoid").Monoid,
"Additive": require("./output/Data.Monoid.Additive").Additive,
"Alternate": require("./output/Data.Monoid.Alternate").Alternate,
"Conj": require("./output/Data.Monoid.Conj").Conj,
"Disj": require("./output/Data.Monoid.Disj").Disj,
"Dual": require("./output/Data.Monoid.Dual").Dual,
"Endo": require("./output/Data.Monoid.Endo").Endo,
"Multiplicative": require("./output/Data.Monoid.Multiplicative").Multiplicative,
"Newtype": require("./output/Data.Newtype").Newtype,
"NonEmpty": require("./output/Data.NonEmpty").NonEmpty,
"Op": require("./output/Data.Op").Op,
"Ord": require("./output/Data.Ord").Ord,
"Ord1": require("./output/Data.Ord").Ord1,
"LT": require("./output/Data.Ordering").LT,
"GT": require("./output/Data.Ordering").GT,
"EQ": require("./output/Data.Ordering").EQ,
"Predicate": require("./output/Data.Predicate").Predicate,
"Ring": require("./output/Data.Ring").Ring,
"Semigroup": require("./output/Data.Semigroup").Semigroup,
"Foldable1": require("./output/Data.Semigroup.Foldable").Foldable1,
"Traversable1": require("./output/Data.Semigroup.Traversable").Traversable1,
"Semiring": require("./output/Data.Semiring").Semiring,
"Show": require("./output/Data.Show").Show,
"Replacement": require("./output/Data.String").Replacement,
"CaseInsensitiveString": require("./output/Data.String.CaseInsensitive").CaseInsensitiveString,
"RegexFlags": require("./output/Data.String.Regex.Flags").RegexFlags,
"SProxy": require("./output/Data.Symbol").SProxy,
"IsSymbol": require("./output/Data.Symbol").IsSymbol,
"Time": require("./output/Data.Time").Time,
"Days": require("./output/Data.Time.Duration").Days,
"Hours": require("./output/Data.Time.Duration").Hours,
"Milliseconds": require("./output/Data.Time.Duration").Milliseconds,
"Minutes": require("./output/Data.Time.Duration").Minutes,
"Seconds": require("./output/Data.Time.Duration").Seconds,
"Duration": require("./output/Data.Time.Duration").Duration,
"Traversable": require("./output/Data.Traversable").Traversable,
"Tuple": require("./output/Data.Tuple").Tuple,
"Unfoldable": require("./output/Data.Unfoldable").Unfoldable,
"Requestable": require("./output/Network.HTTP.Affjax.Request").Requestable,
"ArrayBufferResponse": require("./output/Network.HTTP.Affjax.Response").ArrayBufferResponse,
"BlobResponse": require("./output/Network.HTTP.Affjax.Response").BlobResponse,
"DocumentResponse": require("./output/Network.HTTP.Affjax.Response").DocumentResponse,
"JSONResponse": require("./output/Network.HTTP.Affjax.Response").JSONResponse,
"StringResponse": require("./output/Network.HTTP.Affjax.Response").StringResponse,
"Respondable": require("./output/Network.HTTP.Affjax.Response").Respondable,
"Accept": require("./output/Network.HTTP.RequestHeader").Accept,
"ContentType": require("./output/Network.HTTP.RequestHeader").ContentType,
"RequestHeader": require("./output/Network.HTTP.RequestHeader").RequestHeader,
"StatusCode": require("./output/Network.HTTP.StatusCode").StatusCode,
"Eval": require("./output/PSCI.Support").Eval,
"TypeEquals": require("./output/Type.Equality").TypeEquals,
"Proxy": require("./output/Type.Proxy").Proxy,
"Proxy2": require("./output/Type.Proxy").Proxy2,
"Proxy3": require("./output/Type.Proxy").Proxy3,
"EffectRowEquals": require("./output/Type.Row.Effect.Equality").EffectRowEquals,

}